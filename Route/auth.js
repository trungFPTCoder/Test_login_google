const express = require('express');
const router = express.Router();
const passport = require('passport');
const jwt = require('jsonwebtoken'); // C·∫ßn cho callback

// ‚úÖ Import authController ƒë√£ ƒë∆∞·ª£c t√°i c·∫•u tr√∫c
const { authController } = require('../controllers/authControllers'); 
const middlewareController = require('../controllers/middlewareController');

// --- Email & Password Routes ---
router.post('/register', authController.registerUser);
router.post('/login', authController.loginUser);
router.post('/refreshToken', authController.requestRefreshToken);
router.post('/logout', middlewareController.verifyToken, authController.userLogout);

// --- Google OAuth Routes (Web Redirect Flow) ---

// Route 1: B·∫Øt ƒë·∫ßu qu√° tr√¨nh, chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn Google
router.get(
    "/google",
    passport.authenticate("google", { scope: ["profile", "email"] })
);

// Route 2: Route callback m√† Google s·∫Ω chuy·ªÉn h∆∞·ªõng v·ªÅ sau khi ng∆∞·ªùi d√πng ƒë·ªìng √Ω
router.get(
    "/google/callback",
    // Middleware c·ªßa passport ƒë·ªÉ x·ª≠ l√Ω th√¥ng tin t·ª´ Google
    passport.authenticate("google", {
        failureRedirect: `${process.env.DEEP_LINK_SCHEME}login?error=AuthenticationFailed`,
        session: false // ‚úÖ Quan tr·ªçng: Kh√¥ng t·∫°o session, ch√∫ng ta s·∫Ω d√πng JWT
    }),
    // H√†m n√†y ch·ªâ ch·∫°y khi `passport.authenticate` ·ªü tr√™n th√†nh c√¥ng
    (req, res) => {
        // Passport ƒë√£ x·ª≠ l√Ω v√† g·∫Øn user v√†o req.user
        const user = req.user; 

        // T·∫°o JWT c·ªßa ri√™ng b·∫°n
        const accessToken = authController.generateAccessToken(user);
        const { password, ...userWithoutPassword } = user._doc;
        const userString = encodeURIComponent(JSON.stringify(userWithoutPassword));

        // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng v·ªÅ l·∫°i client (mobile app) v·ªõi token
        console.log(`üöÄ Redirecting user ${user.email} to deep link...`);
        res.redirect(`${process.env.DEEP_LINK_SCHEME}login?token=${accessToken}&user=${userString}`);
    }
);

// --- Google Token Verification (Mobile Flow) ---
// Route n√†y d√†nh cho lu·ªìng mobile app g·ª≠i th·∫≥ng idToken l√™n server
router.post('/google/verify', authController.verifyGoogleToken);

module.exports = router;