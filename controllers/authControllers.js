const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const passport = require('passport');
const User = require('../models/User');
const { OAuth2Client } = require('google-auth-library');
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

/**
 * ‚úÖ H√ÄM M·ªöI: ƒê∆∞·ª£c Passport-Google-Strategy g·ªçi sau khi x√°c th·ª±c th√†nh c√¥ng.
 * T√¨m user trong CSDL b·∫±ng googleId, n·∫øu kh√¥ng c√≥ th√¨ t·∫°o m·ªõi.
 * (H√†m n√†y ƒë∆∞·ª£c export ƒë·ªÉ index.js c√≥ th·ªÉ import v√† s·ª≠ d·ª•ng)
 */
exports.findOrCreateUser = async (accessToken, refreshToken, profile, done) => {
  try {
    // T√¨m user d·ª±a tr√™n googleId
    let user = await User.findOne({ googleId: profile.id });

    if (user) {
      return done(null, user); // ‚úÖ N·∫øu t√¨m th·∫•y, tr·∫£ v·ªÅ user ƒë√≥
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y, ki·ªÉm tra xem c√≥ email ƒë√≥ ch∆∞a ƒë·ªÉ li√™n k·∫øt
    user = await User.findOne({ email: profile.emails[0].value });
    if (user) {
        user.googleId = profile.id;
        user.avatar = user.avatar || profile.photos[0].value; // C·∫≠p nh·∫≠t avatar n·∫øu ch∆∞a c√≥
        user.isVerified = true;
        await user.save();
        return done(null, user);
    }

    // N·∫øu kh√¥ng c√≥ c·∫£ googleId v√† email, t·∫°o user m·ªõi
    const newUser = new User({
      googleId: profile.id,
      fullname: profile.displayName,
      email: profile.emails[0].value,
      avatar: profile.photos[0].value,
      isVerified: true, // Email t·ª´ Google ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
    });
    
    await newUser.save();
    done(null, newUser);
  } catch (error) {
    done(error, null);
  }
};

/**
 * ‚úÖ H√ÄM M·ªöI: ƒê∆∞·ª£c g·ªçi sau khi passport.authenticate trong route callback th√†nh c√¥ng.
 * T·∫°o JWT v√† chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng v·ªÅ ·ª©ng d·ª•ng client v·ªõi token.
 */
exports.googleCallback = (req, res) => {
  // Passport ƒë√£ x√°c th·ª±c th√†nh c√¥ng v√† g·∫Øn user v√†o req.user
  const user = req.user; 
  const accessToken = jwt.sign({ id: user.id, admin: user.admin }, process.env.JWT_ACCESS_KEY, { expiresIn: '1d' });

  // Chu·∫©n b·ªã th√¥ng tin tr·∫£ v·ªÅ cho client
  const { password, ...userWithoutPassword } = user._doc;
  const userString = encodeURIComponent(JSON.stringify(userWithoutPassword));
  
  // Chuy·ªÉn h∆∞·ªõng v·ªÅ app v·ªõi token v√† th√¥ng tin user
  const redirectUrl = `${process.env.DEEP_LINK_SCHEME}login?token=${accessToken}&user=${userString}`;
  
  console.log(`üöÄ Redirecting user ${user.email} to deep link...`);
  res.redirect(redirectUrl);
};


// --- Controller ch√≠nh ---
const authController = {
    //REGISTER
    registerUser: async (req, res) => {
        const { fullname, email, password } = req.body;
        try {
            const existingUser = await User.findOne({ email });
            if (existingUser) {
                return res.status(400).json({ message: 'Email already exists' });
            }
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);
            const newUser = new User({
                fullname: fullname,
                password: hashedPassword,
                email: email,
            });
            const user = await newUser.save();
            const { password: _, ...userWithoutPassword } = user._doc;
            res.status(201).json({ message: 'User registered successfully', user: userWithoutPassword });
        } catch (error) {
            console.error('Error registering user:', error);
            res.status(500).json({ error: 'Error registering user' });
        }
    },

    //LOGIN
    loginUser: async (req, res) => {
        try {
            const user = await User.findOne({ email: req.body.email });
            if (!user) {
                return res.status(404).json({ message: 'User not found' });
            }
            if (!user.password) {
                return res.status(400).json({ message: 'This account is registered with Google. Please use Google login.' });
            }
            const isPasswordValid = await bcrypt.compare(req.body.password, user.password);
            if (!isPasswordValid) {
                return res.status(401).json({ message: 'Invalid password' });
            }
            
            const accessToken = authController.generateAccessToken(user);
            const refreshToken = authController.generateRefreshToken(user);

            res.cookie('refreshToken', refreshToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'strict',
            });

            const { password, ...userWithoutPassword } = user._doc;
            res.status(200).json({ user: userWithoutPassword, accessToken });
        } catch (error) {
            res.status(500).json({ error: error.message });
        }
    },
    
    // --- GOOGLE AUTH LOGIC (ƒê√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o ƒë√¢y) ---
    googleLogin: passport.authenticate('google', { 
      scope: ['profile', 'email'],
      session: false 
    }),

    googleCallback: (req, res) => {
      passport.authenticate('google', { session: false, failureRedirect: '/login-failed' }, (err, user, info) => {
        if (err || !user) {
          return res.redirect(`${process.env.DEEP_LINK_SCHEME}login?error=AuthenticationFailed`);
        }
    
        const token = authController.generateAccessToken(user);
        const { password, ...userWithoutPassword } = user._doc;
        const userString = encodeURIComponent(JSON.stringify(userWithoutPassword));
        
        console.log(`üöÄ Redirecting to deep link with token...`);
        res.redirect(`${process.env.DEEP_LINK_SCHEME}login?token=${token}&user=${userString}`);
      })(req, res);
    },

    // --- TOKEN GENERATION & MANAGEMENT ---
    generateAccessToken: (user) => {
        return jwt.sign({ id: user.id, admin: user.admin }, process.env.JWT_ACCESS_KEY, { expiresIn: '1d' });
    },
    generateRefreshToken: (user) => {
        return jwt.sign({ id: user.id, admin: user.admin }, process.env.JWT_REFRESH_KEY, { expiresIn: '365d' });
    },

    requestRefreshToken: async (req, res) => {
        const refreshToken = req.cookies.refreshToken;
        if (!refreshToken) return res.status(401).json("You are not authenticated!");
        
        jwt.verify(refreshToken, process.env.JWT_REFRESH_KEY, (err, user) => {
            if (err) return res.status(403).json("Refresh token is not valid!");
            
            const newAccessToken = authController.generateAccessToken(user);
            const newRefreshToken = authController.generateRefreshToken(user);

            res.cookie('refreshToken', newRefreshToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'strict',
            });
            res.status(200).json({ accessToken: newAccessToken });
        });
    },

    userLogout: async (req, res) => {
        res.clearCookie('refreshToken');
        res.status(200).json("Logged out successfully!");
    },
    // ‚úÖ H√ÄM M·ªöI: X√ÅC TH·ª∞C ID TOKEN T·ª™ MOBILE APP
    verifyGoogleToken: async (req, res) => {
        const { idToken } = req.body; // Nh·∫≠n idToken t·ª´ body c·ªßa request POST

        if (!idToken) {
            return res.status(400).json({ message: "ID token is required." });
        }

        try {
            // X√°c th·ª±c token v·ªõi Google
            const ticket = await client.verifyIdToken({
                idToken: idToken,
                audience: process.env.GOOGLE_CLIENT_ID, // Web Client ID
            });
            const payload = ticket.getPayload();
            
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ payload
            const { sub: googleId, email, name, picture } = payload;

            // T√¨m ho·∫∑c t·∫°o ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n
            let user = await User.findOne({ googleId: googleId });

            if (!user) {
                // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i v·ªõi t√†i kho·∫£n th∆∞·ªùng ch∆∞a
                user = await User.findOne({ email: email });
                if (user) {
                    // N·∫øu c√≥, li√™n k·∫øt t√†i kho·∫£n
                    user.googleId = googleId;
                    // (T√πy ch·ªçn) C·∫≠p nh·∫≠t t√™n v√† ·∫£nh ƒë·∫°i di·ªán
                    user.fullname = user.fullname || name;
                    user.avatar = user.avatar || picture;
                    await user.save();
                } else {
                    // N·∫øu kh√¥ng, t·∫°o ng∆∞·ªùi d√πng m·ªõi
                    user = await new User({
                        googleId: googleId,
                        email: email,
                        fullname: name,
                        avatar: picture,
                        // M·∫≠t kh·∫©u c√≥ th·ªÉ ƒë·ªÉ tr·ªëng v√¨ h·ªç ƒëƒÉng nh·∫≠p qua Google
                    }).save();
                }
            }

            // T·∫°o Access Token v√† Refresh Token c·ªßa ri√™ng b·∫°n
            const accessToken = authController.generateAccessToken(user);
            const refreshToken = authController.generateRefreshToken(user);
            // (B·∫°n c√≥ th·ªÉ l∆∞u refreshToken v√†o cookie ho·∫∑c g·ª≠i v·ªÅ client)

            const { password, ...userWithoutPassword } = user._doc;
            
            // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† token cho mobile app
            res.status(200).json({ 
                message: "Google sign-in successful",
                user: userWithoutPassword, 
                accessToken: accessToken 
            });

        } catch (error) {
            console.error("Google token verification failed:", error);
            res.status(401).json({ message: "Invalid Google token." });
        }
    },
};


// ‚úÖ Gh√©p c√°c h√†m ƒë√£ export ·ªü tr√™n v√†o object authController ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ route
// ƒêi·ªÅu n√†y gi√∫p gi·ªØ c·∫•u tr√∫c code c·ªßa b·∫°n m√† v·∫´n t√°ch b·∫°ch ƒë∆∞·ª£c logic
authController.findOrCreateUser = exports.findOrCreateUser;
authController.googleCallback = exports.googleCallback;

module.exports = authController;