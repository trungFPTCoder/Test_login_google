const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const User = require('../models/User'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
const { OAuth2Client } = require('google-auth-library');
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID); 


// --- C·∫•u h√¨nh Passport.js v·ªõi chi·∫øn l∆∞·ª£c Google ---
// Ph·∫ßn n√†y s·∫Ω ƒë∆∞·ª£c Node.js th·ª±c thi khi module ƒë∆∞·ª£c require, v√† n√≥ s·∫Ω c·∫•u h√¨nh passport.
passport.use(new GoogleStrategy({
    clientID: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    callbackURL: `${process.env.BACKEND_URL}${process.env.CALLBACK_URL}`
  },
  // H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi sau khi Google x√°c th·ª±c ng∆∞·ªùi d√πng th√†nh c√¥ng
  async (accessToken, refreshToken, profile, done) => {
    try {
      // T√¨m ho·∫∑c t·∫°o ng∆∞·ªùi d√πng trong database
      let user = await User.findOne({ googleId: profile.id });
      if (!user) {
        user = await User.findOne({ email: profile.emails[0].value });
        if (user) {
          // Li√™n k·∫øt t√†i kho·∫£n n·∫øu ƒë√£ c√≥ email
          user.googleId = profile.id;
          await user.save();
        } else {
          // T·∫°o ng∆∞·ªùi d√πng m·ªõi
          user = await new User({
            googleId: profile.id,
            fullname: profile.displayName,
            email: profile.emails[0].value,
          }).save();
        }
      }
      return done(null, user);
    } catch (error) {
      return done(error, null);
    }
  }
));

// --- Controller ch√≠nh ---
const authController = {
    //REGISTER
    registerUser: async (req, res) => {
        const { fullname, email, password } = req.body;
        try {
            const existingUser = await User.findOne({ email });
            if (existingUser) {
                return res.status(400).json({ message: 'Email already exists' });
            }
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);
            const newUser = new User({
                fullname: fullname,
                password: hashedPassword,
                email: email,
            });
            const user = await newUser.save();
            const { password: _, ...userWithoutPassword } = user._doc;
            res.status(201).json({ message: 'User registered successfully', user: userWithoutPassword });
        } catch (error) {
            console.error('Error registering user:', error);
            res.status(500).json({ error: 'Error registering user' });
        }
    },

    //LOGIN
    loginUser: async (req, res) => {
        try {
            const user = await User.findOne({ email: req.body.email });
            if (!user) {
                return res.status(404).json({ message: 'User not found' });
            }
            if (!user.password) {
                return res.status(400).json({ message: 'This account is registered with Google. Please use Google login.' });
            }
            const isPasswordValid = await bcrypt.compare(req.body.password, user.password);
            if (!isPasswordValid) {
                return res.status(401).json({ message: 'Invalid password' });
            }
            
            const accessToken = authController.generateAccessToken(user);
            const refreshToken = authController.generateRefreshToken(user);

            res.cookie('refreshToken', refreshToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'strict',
            });

            const { password, ...userWithoutPassword } = user._doc;
            res.status(200).json({ user: userWithoutPassword, accessToken });
        } catch (error) {
            res.status(500).json({ error: error.message });
        }
    },
    
    // --- GOOGLE AUTH LOGIC (ƒê√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o ƒë√¢y) ---
    googleLogin: passport.authenticate('google', { 
      scope: ['profile', 'email'],
      session: false 
    }),

    googleCallback: (req, res) => {
      passport.authenticate('google', { session: false, failureRedirect: '/login-failed' }, (err, user, info) => {
        if (err || !user) {
          return res.redirect(`${process.env.DEEP_LINK_SCHEME}login?error=AuthenticationFailed`);
        }
    
        const token = authController.generateAccessToken(user);
        const { password, ...userWithoutPassword } = user._doc;
        const userString = encodeURIComponent(JSON.stringify(userWithoutPassword));
        
        console.log(`üöÄ Redirecting to deep link with token...`);
        res.redirect(`${process.env.DEEP_LINK_SCHEME}login?token=${token}&user=${userString}`);
      })(req, res);
    },

    // --- TOKEN GENERATION & MANAGEMENT ---
    generateAccessToken: (user) => {
        return jwt.sign({ id: user.id, admin: user.admin }, process.env.JWT_ACCESS_KEY, { expiresIn: '1d' });
    },
    generateRefreshToken: (user) => {
        return jwt.sign({ id: user.id, admin: user.admin }, process.env.JWT_REFRESH_KEY, { expiresIn: '365d' });
    },

    requestRefreshToken: async (req, res) => {
        const refreshToken = req.cookies.refreshToken;
        if (!refreshToken) return res.status(401).json("You are not authenticated!");
        
        jwt.verify(refreshToken, process.env.JWT_REFRESH_KEY, (err, user) => {
            if (err) return res.status(403).json("Refresh token is not valid!");
            
            const newAccessToken = authController.generateAccessToken(user);
            const newRefreshToken = authController.generateRefreshToken(user);

            res.cookie('refreshToken', newRefreshToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'strict',
            });
            res.status(200).json({ accessToken: newAccessToken });
        });
    },

    userLogout: async (req, res) => {
        res.clearCookie('refreshToken');
        res.status(200).json("Logged out successfully!");
    },
    // ‚úÖ H√ÄM M·ªöI: X√ÅC TH·ª∞C ID TOKEN T·ª™ MOBILE APP
    verifyGoogleToken: async (req, res) => {
        const { idToken } = req.body; // Nh·∫≠n idToken t·ª´ body c·ªßa request POST

        if (!idToken) {
            return res.status(400).json({ message: "ID token is required." });
        }

        try {
            // X√°c th·ª±c token v·ªõi Google
            const ticket = await client.verifyIdToken({
                idToken: idToken,
                audience: process.env.GOOGLE_CLIENT_ID, // Web Client ID
            });
            const payload = ticket.getPayload();
            
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ payload
            const { sub: googleId, email, name, picture } = payload;

            // T√¨m ho·∫∑c t·∫°o ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n
            let user = await User.findOne({ googleId: googleId });

            if (!user) {
                // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i v·ªõi t√†i kho·∫£n th∆∞·ªùng ch∆∞a
                user = await User.findOne({ email: email });
                if (user) {
                    // N·∫øu c√≥, li√™n k·∫øt t√†i kho·∫£n
                    user.googleId = googleId;
                    // (T√πy ch·ªçn) C·∫≠p nh·∫≠t t√™n v√† ·∫£nh ƒë·∫°i di·ªán
                    user.fullname = user.fullname || name;
                    user.avatar = user.avatar || picture;
                    await user.save();
                } else {
                    // N·∫øu kh√¥ng, t·∫°o ng∆∞·ªùi d√πng m·ªõi
                    user = await new User({
                        googleId: googleId,
                        email: email,
                        fullname: name,
                        avatar: picture,
                        // M·∫≠t kh·∫©u c√≥ th·ªÉ ƒë·ªÉ tr·ªëng v√¨ h·ªç ƒëƒÉng nh·∫≠p qua Google
                    }).save();
                }
            }

            // T·∫°o Access Token v√† Refresh Token c·ªßa ri√™ng b·∫°n
            const accessToken = authController.generateAccessToken(user);
            const refreshToken = authController.generateRefreshToken(user);
            // (B·∫°n c√≥ th·ªÉ l∆∞u refreshToken v√†o cookie ho·∫∑c g·ª≠i v·ªÅ client)

            const { password, ...userWithoutPassword } = user._doc;
            
            // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† token cho mobile app
            res.status(200).json({ 
                message: "Google sign-in successful",
                user: userWithoutPassword, 
                accessToken: accessToken 
            });

        } catch (error) {
            console.error("Google token verification failed:", error);
            res.status(401).json({ message: "Invalid Google token." });
        }
    },
};

module.exports = authController;
